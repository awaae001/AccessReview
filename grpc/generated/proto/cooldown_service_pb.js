// source: cooldown_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.cooldown.AddBlacklistRequest', null, global);
goog.exportSymbol('proto.cooldown.AddBlacklistResponse', null, global);
goog.exportSymbol('proto.cooldown.BatchGetCooldownRequest', null, global);
goog.exportSymbol('proto.cooldown.BatchGetCooldownResponse', null, global);
goog.exportSymbol('proto.cooldown.BlacklistInfo', null, global);
goog.exportSymbol('proto.cooldown.BlacklistResponse', null, global);
goog.exportSymbol('proto.cooldown.BlacklistedUser', null, global);
goog.exportSymbol('proto.cooldown.CooldownInfo', null, global);
goog.exportSymbol('proto.cooldown.CooldownResponse', null, global);
goog.exportSymbol('proto.cooldown.CooldownStatus', null, global);
goog.exportSymbol('proto.cooldown.CooldownType', null, global);
goog.exportSymbol('proto.cooldown.GetAllBlacklistRequest', null, global);
goog.exportSymbol('proto.cooldown.GetAllBlacklistResponse', null, global);
goog.exportSymbol('proto.cooldown.GetBlacklistRequest', null, global);
goog.exportSymbol('proto.cooldown.GetCooldownRequest', null, global);
goog.exportSymbol('proto.cooldown.TimeRemaining', null, global);
goog.exportSymbol('proto.cooldown.UserCooldownStatus', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cooldown.GetCooldownRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cooldown.GetCooldownRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cooldown.GetCooldownRequest.displayName = 'proto.cooldown.GetCooldownRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cooldown.GetBlacklistRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cooldown.GetBlacklistRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cooldown.GetBlacklistRequest.displayName = 'proto.cooldown.GetBlacklistRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cooldown.AddBlacklistRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cooldown.AddBlacklistRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cooldown.AddBlacklistRequest.displayName = 'proto.cooldown.AddBlacklistRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cooldown.GetAllBlacklistRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cooldown.GetAllBlacklistRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cooldown.GetAllBlacklistRequest.displayName = 'proto.cooldown.GetAllBlacklistRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cooldown.BatchGetCooldownRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cooldown.BatchGetCooldownRequest.repeatedFields_, null);
};
goog.inherits(proto.cooldown.BatchGetCooldownRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cooldown.BatchGetCooldownRequest.displayName = 'proto.cooldown.BatchGetCooldownRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cooldown.CooldownResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cooldown.CooldownResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cooldown.CooldownResponse.displayName = 'proto.cooldown.CooldownResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cooldown.BlacklistResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cooldown.BlacklistResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cooldown.BlacklistResponse.displayName = 'proto.cooldown.BlacklistResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cooldown.AddBlacklistResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cooldown.AddBlacklistResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cooldown.AddBlacklistResponse.displayName = 'proto.cooldown.AddBlacklistResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cooldown.GetAllBlacklistResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cooldown.GetAllBlacklistResponse.repeatedFields_, null);
};
goog.inherits(proto.cooldown.GetAllBlacklistResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cooldown.GetAllBlacklistResponse.displayName = 'proto.cooldown.GetAllBlacklistResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cooldown.BatchGetCooldownResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cooldown.BatchGetCooldownResponse.repeatedFields_, null);
};
goog.inherits(proto.cooldown.BatchGetCooldownResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cooldown.BatchGetCooldownResponse.displayName = 'proto.cooldown.BatchGetCooldownResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cooldown.TimeRemaining = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cooldown.TimeRemaining, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cooldown.TimeRemaining.displayName = 'proto.cooldown.TimeRemaining';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cooldown.BlacklistedUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cooldown.BlacklistedUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cooldown.BlacklistedUser.displayName = 'proto.cooldown.BlacklistedUser';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cooldown.UserCooldownStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cooldown.UserCooldownStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cooldown.UserCooldownStatus.displayName = 'proto.cooldown.UserCooldownStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cooldown.CooldownInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cooldown.CooldownInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cooldown.CooldownInfo.displayName = 'proto.cooldown.CooldownInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cooldown.BlacklistInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cooldown.BlacklistInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cooldown.BlacklistInfo.displayName = 'proto.cooldown.BlacklistInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cooldown.GetCooldownRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cooldown.GetCooldownRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cooldown.GetCooldownRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cooldown.GetCooldownRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cooldown.GetCooldownRequest}
 */
proto.cooldown.GetCooldownRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cooldown.GetCooldownRequest;
  return proto.cooldown.GetCooldownRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cooldown.GetCooldownRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cooldown.GetCooldownRequest}
 */
proto.cooldown.GetCooldownRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cooldown.GetCooldownRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cooldown.GetCooldownRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cooldown.GetCooldownRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cooldown.GetCooldownRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.cooldown.GetCooldownRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cooldown.GetCooldownRequest} returns this
 */
proto.cooldown.GetCooldownRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cooldown.GetBlacklistRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cooldown.GetBlacklistRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cooldown.GetBlacklistRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cooldown.GetBlacklistRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cooldown.GetBlacklistRequest}
 */
proto.cooldown.GetBlacklistRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cooldown.GetBlacklistRequest;
  return proto.cooldown.GetBlacklistRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cooldown.GetBlacklistRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cooldown.GetBlacklistRequest}
 */
proto.cooldown.GetBlacklistRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cooldown.GetBlacklistRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cooldown.GetBlacklistRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cooldown.GetBlacklistRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cooldown.GetBlacklistRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.cooldown.GetBlacklistRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cooldown.GetBlacklistRequest} returns this
 */
proto.cooldown.GetBlacklistRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cooldown.AddBlacklistRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cooldown.AddBlacklistRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cooldown.AddBlacklistRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cooldown.AddBlacklistRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    reason: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cooldown.AddBlacklistRequest}
 */
proto.cooldown.AddBlacklistRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cooldown.AddBlacklistRequest;
  return proto.cooldown.AddBlacklistRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cooldown.AddBlacklistRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cooldown.AddBlacklistRequest}
 */
proto.cooldown.AddBlacklistRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cooldown.AddBlacklistRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cooldown.AddBlacklistRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cooldown.AddBlacklistRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cooldown.AddBlacklistRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.cooldown.AddBlacklistRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cooldown.AddBlacklistRequest} returns this
 */
proto.cooldown.AddBlacklistRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string reason = 2;
 * @return {string}
 */
proto.cooldown.AddBlacklistRequest.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cooldown.AddBlacklistRequest} returns this
 */
proto.cooldown.AddBlacklistRequest.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 timestamp = 3;
 * @return {number}
 */
proto.cooldown.AddBlacklistRequest.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cooldown.AddBlacklistRequest} returns this
 */
proto.cooldown.AddBlacklistRequest.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cooldown.GetAllBlacklistRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cooldown.GetAllBlacklistRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cooldown.GetAllBlacklistRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cooldown.GetAllBlacklistRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cooldown.GetAllBlacklistRequest}
 */
proto.cooldown.GetAllBlacklistRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cooldown.GetAllBlacklistRequest;
  return proto.cooldown.GetAllBlacklistRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cooldown.GetAllBlacklistRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cooldown.GetAllBlacklistRequest}
 */
proto.cooldown.GetAllBlacklistRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cooldown.GetAllBlacklistRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cooldown.GetAllBlacklistRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cooldown.GetAllBlacklistRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cooldown.GetAllBlacklistRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cooldown.BatchGetCooldownRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cooldown.BatchGetCooldownRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cooldown.BatchGetCooldownRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cooldown.BatchGetCooldownRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cooldown.BatchGetCooldownRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cooldown.BatchGetCooldownRequest}
 */
proto.cooldown.BatchGetCooldownRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cooldown.BatchGetCooldownRequest;
  return proto.cooldown.BatchGetCooldownRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cooldown.BatchGetCooldownRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cooldown.BatchGetCooldownRequest}
 */
proto.cooldown.BatchGetCooldownRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addUserIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cooldown.BatchGetCooldownRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cooldown.BatchGetCooldownRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cooldown.BatchGetCooldownRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cooldown.BatchGetCooldownRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string user_ids = 1;
 * @return {!Array<string>}
 */
proto.cooldown.BatchGetCooldownRequest.prototype.getUserIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.cooldown.BatchGetCooldownRequest} returns this
 */
proto.cooldown.BatchGetCooldownRequest.prototype.setUserIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cooldown.BatchGetCooldownRequest} returns this
 */
proto.cooldown.BatchGetCooldownRequest.prototype.addUserIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cooldown.BatchGetCooldownRequest} returns this
 */
proto.cooldown.BatchGetCooldownRequest.prototype.clearUserIdsList = function() {
  return this.setUserIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cooldown.CooldownResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cooldown.CooldownResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cooldown.CooldownResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cooldown.CooldownResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    isOnCooldown: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    cooldownStartTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    cooldownEndTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timeRemaining: (f = msg.getTimeRemaining()) && proto.cooldown.TimeRemaining.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cooldown.CooldownResponse}
 */
proto.cooldown.CooldownResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cooldown.CooldownResponse;
  return proto.cooldown.CooldownResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cooldown.CooldownResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cooldown.CooldownResponse}
 */
proto.cooldown.CooldownResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsOnCooldown(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCooldownStartTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCooldownEndTime(value);
      break;
    case 4:
      var value = new proto.cooldown.TimeRemaining;
      reader.readMessage(value,proto.cooldown.TimeRemaining.deserializeBinaryFromReader);
      msg.setTimeRemaining(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cooldown.CooldownResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cooldown.CooldownResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cooldown.CooldownResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cooldown.CooldownResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsOnCooldown();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getCooldownStartTime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getCooldownEndTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getTimeRemaining();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.cooldown.TimeRemaining.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool is_on_cooldown = 1;
 * @return {boolean}
 */
proto.cooldown.CooldownResponse.prototype.getIsOnCooldown = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cooldown.CooldownResponse} returns this
 */
proto.cooldown.CooldownResponse.prototype.setIsOnCooldown = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int64 cooldown_start_time = 2;
 * @return {number}
 */
proto.cooldown.CooldownResponse.prototype.getCooldownStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cooldown.CooldownResponse} returns this
 */
proto.cooldown.CooldownResponse.prototype.setCooldownStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 cooldown_end_time = 3;
 * @return {number}
 */
proto.cooldown.CooldownResponse.prototype.getCooldownEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cooldown.CooldownResponse} returns this
 */
proto.cooldown.CooldownResponse.prototype.setCooldownEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional TimeRemaining time_remaining = 4;
 * @return {?proto.cooldown.TimeRemaining}
 */
proto.cooldown.CooldownResponse.prototype.getTimeRemaining = function() {
  return /** @type{?proto.cooldown.TimeRemaining} */ (
    jspb.Message.getWrapperField(this, proto.cooldown.TimeRemaining, 4));
};


/**
 * @param {?proto.cooldown.TimeRemaining|undefined} value
 * @return {!proto.cooldown.CooldownResponse} returns this
*/
proto.cooldown.CooldownResponse.prototype.setTimeRemaining = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cooldown.CooldownResponse} returns this
 */
proto.cooldown.CooldownResponse.prototype.clearTimeRemaining = function() {
  return this.setTimeRemaining(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cooldown.CooldownResponse.prototype.hasTimeRemaining = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cooldown.BlacklistResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cooldown.BlacklistResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cooldown.BlacklistResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cooldown.BlacklistResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    isBlacklisted: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    reason: jspb.Message.getFieldWithDefault(msg, 2, ""),
    blacklistStartTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    blacklistEndTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    timeRemaining: (f = msg.getTimeRemaining()) && proto.cooldown.TimeRemaining.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cooldown.BlacklistResponse}
 */
proto.cooldown.BlacklistResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cooldown.BlacklistResponse;
  return proto.cooldown.BlacklistResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cooldown.BlacklistResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cooldown.BlacklistResponse}
 */
proto.cooldown.BlacklistResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsBlacklisted(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlacklistStartTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlacklistEndTime(value);
      break;
    case 5:
      var value = new proto.cooldown.TimeRemaining;
      reader.readMessage(value,proto.cooldown.TimeRemaining.deserializeBinaryFromReader);
      msg.setTimeRemaining(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cooldown.BlacklistResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cooldown.BlacklistResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cooldown.BlacklistResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cooldown.BlacklistResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsBlacklisted();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBlacklistStartTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getBlacklistEndTime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getTimeRemaining();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.cooldown.TimeRemaining.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool is_blacklisted = 1;
 * @return {boolean}
 */
proto.cooldown.BlacklistResponse.prototype.getIsBlacklisted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cooldown.BlacklistResponse} returns this
 */
proto.cooldown.BlacklistResponse.prototype.setIsBlacklisted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string reason = 2;
 * @return {string}
 */
proto.cooldown.BlacklistResponse.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cooldown.BlacklistResponse} returns this
 */
proto.cooldown.BlacklistResponse.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 blacklist_start_time = 3;
 * @return {number}
 */
proto.cooldown.BlacklistResponse.prototype.getBlacklistStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cooldown.BlacklistResponse} returns this
 */
proto.cooldown.BlacklistResponse.prototype.setBlacklistStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 blacklist_end_time = 4;
 * @return {number}
 */
proto.cooldown.BlacklistResponse.prototype.getBlacklistEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.cooldown.BlacklistResponse} returns this
 */
proto.cooldown.BlacklistResponse.prototype.setBlacklistEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional TimeRemaining time_remaining = 5;
 * @return {?proto.cooldown.TimeRemaining}
 */
proto.cooldown.BlacklistResponse.prototype.getTimeRemaining = function() {
  return /** @type{?proto.cooldown.TimeRemaining} */ (
    jspb.Message.getWrapperField(this, proto.cooldown.TimeRemaining, 5));
};


/**
 * @param {?proto.cooldown.TimeRemaining|undefined} value
 * @return {!proto.cooldown.BlacklistResponse} returns this
*/
proto.cooldown.BlacklistResponse.prototype.setTimeRemaining = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cooldown.BlacklistResponse} returns this
 */
proto.cooldown.BlacklistResponse.prototype.clearTimeRemaining = function() {
  return this.setTimeRemaining(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cooldown.BlacklistResponse.prototype.hasTimeRemaining = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cooldown.AddBlacklistResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cooldown.AddBlacklistResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cooldown.AddBlacklistResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cooldown.AddBlacklistResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cooldown.AddBlacklistResponse}
 */
proto.cooldown.AddBlacklistResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cooldown.AddBlacklistResponse;
  return proto.cooldown.AddBlacklistResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cooldown.AddBlacklistResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cooldown.AddBlacklistResponse}
 */
proto.cooldown.AddBlacklistResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cooldown.AddBlacklistResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cooldown.AddBlacklistResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cooldown.AddBlacklistResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cooldown.AddBlacklistResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.cooldown.AddBlacklistResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cooldown.AddBlacklistResponse} returns this
 */
proto.cooldown.AddBlacklistResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.cooldown.AddBlacklistResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cooldown.AddBlacklistResponse} returns this
 */
proto.cooldown.AddBlacklistResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cooldown.GetAllBlacklistResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cooldown.GetAllBlacklistResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cooldown.GetAllBlacklistResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cooldown.GetAllBlacklistResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cooldown.GetAllBlacklistResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    blacklistedUsersList: jspb.Message.toObjectList(msg.getBlacklistedUsersList(),
    proto.cooldown.BlacklistedUser.toObject, includeInstance),
    totalCount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cooldown.GetAllBlacklistResponse}
 */
proto.cooldown.GetAllBlacklistResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cooldown.GetAllBlacklistResponse;
  return proto.cooldown.GetAllBlacklistResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cooldown.GetAllBlacklistResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cooldown.GetAllBlacklistResponse}
 */
proto.cooldown.GetAllBlacklistResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cooldown.BlacklistedUser;
      reader.readMessage(value,proto.cooldown.BlacklistedUser.deserializeBinaryFromReader);
      msg.addBlacklistedUsers(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cooldown.GetAllBlacklistResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cooldown.GetAllBlacklistResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cooldown.GetAllBlacklistResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cooldown.GetAllBlacklistResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlacklistedUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.cooldown.BlacklistedUser.serializeBinaryToWriter
    );
  }
  f = message.getTotalCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated BlacklistedUser blacklisted_users = 1;
 * @return {!Array<!proto.cooldown.BlacklistedUser>}
 */
proto.cooldown.GetAllBlacklistResponse.prototype.getBlacklistedUsersList = function() {
  return /** @type{!Array<!proto.cooldown.BlacklistedUser>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cooldown.BlacklistedUser, 1));
};


/**
 * @param {!Array<!proto.cooldown.BlacklistedUser>} value
 * @return {!proto.cooldown.GetAllBlacklistResponse} returns this
*/
proto.cooldown.GetAllBlacklistResponse.prototype.setBlacklistedUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.cooldown.BlacklistedUser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cooldown.BlacklistedUser}
 */
proto.cooldown.GetAllBlacklistResponse.prototype.addBlacklistedUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.cooldown.BlacklistedUser, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cooldown.GetAllBlacklistResponse} returns this
 */
proto.cooldown.GetAllBlacklistResponse.prototype.clearBlacklistedUsersList = function() {
  return this.setBlacklistedUsersList([]);
};


/**
 * optional int32 total_count = 2;
 * @return {number}
 */
proto.cooldown.GetAllBlacklistResponse.prototype.getTotalCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cooldown.GetAllBlacklistResponse} returns this
 */
proto.cooldown.GetAllBlacklistResponse.prototype.setTotalCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cooldown.BatchGetCooldownResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cooldown.BatchGetCooldownResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cooldown.BatchGetCooldownResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cooldown.BatchGetCooldownResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cooldown.BatchGetCooldownResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    userStatusesList: jspb.Message.toObjectList(msg.getUserStatusesList(),
    proto.cooldown.UserCooldownStatus.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cooldown.BatchGetCooldownResponse}
 */
proto.cooldown.BatchGetCooldownResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cooldown.BatchGetCooldownResponse;
  return proto.cooldown.BatchGetCooldownResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cooldown.BatchGetCooldownResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cooldown.BatchGetCooldownResponse}
 */
proto.cooldown.BatchGetCooldownResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cooldown.UserCooldownStatus;
      reader.readMessage(value,proto.cooldown.UserCooldownStatus.deserializeBinaryFromReader);
      msg.addUserStatuses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cooldown.BatchGetCooldownResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cooldown.BatchGetCooldownResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cooldown.BatchGetCooldownResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cooldown.BatchGetCooldownResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserStatusesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.cooldown.UserCooldownStatus.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UserCooldownStatus user_statuses = 1;
 * @return {!Array<!proto.cooldown.UserCooldownStatus>}
 */
proto.cooldown.BatchGetCooldownResponse.prototype.getUserStatusesList = function() {
  return /** @type{!Array<!proto.cooldown.UserCooldownStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cooldown.UserCooldownStatus, 1));
};


/**
 * @param {!Array<!proto.cooldown.UserCooldownStatus>} value
 * @return {!proto.cooldown.BatchGetCooldownResponse} returns this
*/
proto.cooldown.BatchGetCooldownResponse.prototype.setUserStatusesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.cooldown.UserCooldownStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cooldown.UserCooldownStatus}
 */
proto.cooldown.BatchGetCooldownResponse.prototype.addUserStatuses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.cooldown.UserCooldownStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cooldown.BatchGetCooldownResponse} returns this
 */
proto.cooldown.BatchGetCooldownResponse.prototype.clearUserStatusesList = function() {
  return this.setUserStatusesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cooldown.TimeRemaining.prototype.toObject = function(opt_includeInstance) {
  return proto.cooldown.TimeRemaining.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cooldown.TimeRemaining} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cooldown.TimeRemaining.toObject = function(includeInstance, msg) {
  var f, obj = {
    hoursLeft: jspb.Message.getFieldWithDefault(msg, 1, 0),
    minutesLeft: jspb.Message.getFieldWithDefault(msg, 2, 0),
    totalSecondsLeft: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cooldown.TimeRemaining}
 */
proto.cooldown.TimeRemaining.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cooldown.TimeRemaining;
  return proto.cooldown.TimeRemaining.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cooldown.TimeRemaining} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cooldown.TimeRemaining}
 */
proto.cooldown.TimeRemaining.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHoursLeft(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinutesLeft(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalSecondsLeft(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cooldown.TimeRemaining.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cooldown.TimeRemaining.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cooldown.TimeRemaining} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cooldown.TimeRemaining.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHoursLeft();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMinutesLeft();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTotalSecondsLeft();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int32 hours_left = 1;
 * @return {number}
 */
proto.cooldown.TimeRemaining.prototype.getHoursLeft = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cooldown.TimeRemaining} returns this
 */
proto.cooldown.TimeRemaining.prototype.setHoursLeft = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 minutes_left = 2;
 * @return {number}
 */
proto.cooldown.TimeRemaining.prototype.getMinutesLeft = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cooldown.TimeRemaining} returns this
 */
proto.cooldown.TimeRemaining.prototype.setMinutesLeft = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 total_seconds_left = 3;
 * @return {number}
 */
proto.cooldown.TimeRemaining.prototype.getTotalSecondsLeft = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cooldown.TimeRemaining} returns this
 */
proto.cooldown.TimeRemaining.prototype.setTotalSecondsLeft = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cooldown.BlacklistedUser.prototype.toObject = function(opt_includeInstance) {
  return proto.cooldown.BlacklistedUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cooldown.BlacklistedUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cooldown.BlacklistedUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    reason: jspb.Message.getFieldWithDefault(msg, 2, ""),
    blacklistStartTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    blacklistEndTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    timeRemaining: (f = msg.getTimeRemaining()) && proto.cooldown.TimeRemaining.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cooldown.BlacklistedUser}
 */
proto.cooldown.BlacklistedUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cooldown.BlacklistedUser;
  return proto.cooldown.BlacklistedUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cooldown.BlacklistedUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cooldown.BlacklistedUser}
 */
proto.cooldown.BlacklistedUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlacklistStartTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlacklistEndTime(value);
      break;
    case 5:
      var value = new proto.cooldown.TimeRemaining;
      reader.readMessage(value,proto.cooldown.TimeRemaining.deserializeBinaryFromReader);
      msg.setTimeRemaining(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cooldown.BlacklistedUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cooldown.BlacklistedUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cooldown.BlacklistedUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cooldown.BlacklistedUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBlacklistStartTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getBlacklistEndTime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getTimeRemaining();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.cooldown.TimeRemaining.serializeBinaryToWriter
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.cooldown.BlacklistedUser.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cooldown.BlacklistedUser} returns this
 */
proto.cooldown.BlacklistedUser.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string reason = 2;
 * @return {string}
 */
proto.cooldown.BlacklistedUser.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cooldown.BlacklistedUser} returns this
 */
proto.cooldown.BlacklistedUser.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 blacklist_start_time = 3;
 * @return {number}
 */
proto.cooldown.BlacklistedUser.prototype.getBlacklistStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cooldown.BlacklistedUser} returns this
 */
proto.cooldown.BlacklistedUser.prototype.setBlacklistStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 blacklist_end_time = 4;
 * @return {number}
 */
proto.cooldown.BlacklistedUser.prototype.getBlacklistEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.cooldown.BlacklistedUser} returns this
 */
proto.cooldown.BlacklistedUser.prototype.setBlacklistEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional TimeRemaining time_remaining = 5;
 * @return {?proto.cooldown.TimeRemaining}
 */
proto.cooldown.BlacklistedUser.prototype.getTimeRemaining = function() {
  return /** @type{?proto.cooldown.TimeRemaining} */ (
    jspb.Message.getWrapperField(this, proto.cooldown.TimeRemaining, 5));
};


/**
 * @param {?proto.cooldown.TimeRemaining|undefined} value
 * @return {!proto.cooldown.BlacklistedUser} returns this
*/
proto.cooldown.BlacklistedUser.prototype.setTimeRemaining = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cooldown.BlacklistedUser} returns this
 */
proto.cooldown.BlacklistedUser.prototype.clearTimeRemaining = function() {
  return this.setTimeRemaining(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cooldown.BlacklistedUser.prototype.hasTimeRemaining = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cooldown.UserCooldownStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.cooldown.UserCooldownStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cooldown.UserCooldownStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cooldown.UserCooldownStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    autoApplyCooldown: (f = msg.getAutoApplyCooldown()) && proto.cooldown.CooldownInfo.toObject(includeInstance, f),
    blacklistInfo: (f = msg.getBlacklistInfo()) && proto.cooldown.BlacklistInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cooldown.UserCooldownStatus}
 */
proto.cooldown.UserCooldownStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cooldown.UserCooldownStatus;
  return proto.cooldown.UserCooldownStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cooldown.UserCooldownStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cooldown.UserCooldownStatus}
 */
proto.cooldown.UserCooldownStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = new proto.cooldown.CooldownInfo;
      reader.readMessage(value,proto.cooldown.CooldownInfo.deserializeBinaryFromReader);
      msg.setAutoApplyCooldown(value);
      break;
    case 3:
      var value = new proto.cooldown.BlacklistInfo;
      reader.readMessage(value,proto.cooldown.BlacklistInfo.deserializeBinaryFromReader);
      msg.setBlacklistInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cooldown.UserCooldownStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cooldown.UserCooldownStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cooldown.UserCooldownStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cooldown.UserCooldownStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAutoApplyCooldown();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cooldown.CooldownInfo.serializeBinaryToWriter
    );
  }
  f = message.getBlacklistInfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cooldown.BlacklistInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.cooldown.UserCooldownStatus.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cooldown.UserCooldownStatus} returns this
 */
proto.cooldown.UserCooldownStatus.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional CooldownInfo auto_apply_cooldown = 2;
 * @return {?proto.cooldown.CooldownInfo}
 */
proto.cooldown.UserCooldownStatus.prototype.getAutoApplyCooldown = function() {
  return /** @type{?proto.cooldown.CooldownInfo} */ (
    jspb.Message.getWrapperField(this, proto.cooldown.CooldownInfo, 2));
};


/**
 * @param {?proto.cooldown.CooldownInfo|undefined} value
 * @return {!proto.cooldown.UserCooldownStatus} returns this
*/
proto.cooldown.UserCooldownStatus.prototype.setAutoApplyCooldown = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cooldown.UserCooldownStatus} returns this
 */
proto.cooldown.UserCooldownStatus.prototype.clearAutoApplyCooldown = function() {
  return this.setAutoApplyCooldown(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cooldown.UserCooldownStatus.prototype.hasAutoApplyCooldown = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BlacklistInfo blacklist_info = 3;
 * @return {?proto.cooldown.BlacklistInfo}
 */
proto.cooldown.UserCooldownStatus.prototype.getBlacklistInfo = function() {
  return /** @type{?proto.cooldown.BlacklistInfo} */ (
    jspb.Message.getWrapperField(this, proto.cooldown.BlacklistInfo, 3));
};


/**
 * @param {?proto.cooldown.BlacklistInfo|undefined} value
 * @return {!proto.cooldown.UserCooldownStatus} returns this
*/
proto.cooldown.UserCooldownStatus.prototype.setBlacklistInfo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cooldown.UserCooldownStatus} returns this
 */
proto.cooldown.UserCooldownStatus.prototype.clearBlacklistInfo = function() {
  return this.setBlacklistInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cooldown.UserCooldownStatus.prototype.hasBlacklistInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cooldown.CooldownInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.cooldown.CooldownInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cooldown.CooldownInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cooldown.CooldownInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    isActive: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    startTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    endTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timeRemaining: (f = msg.getTimeRemaining()) && proto.cooldown.TimeRemaining.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cooldown.CooldownInfo}
 */
proto.cooldown.CooldownInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cooldown.CooldownInfo;
  return proto.cooldown.CooldownInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cooldown.CooldownInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cooldown.CooldownInfo}
 */
proto.cooldown.CooldownInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsActive(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndTime(value);
      break;
    case 4:
      var value = new proto.cooldown.TimeRemaining;
      reader.readMessage(value,proto.cooldown.TimeRemaining.deserializeBinaryFromReader);
      msg.setTimeRemaining(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cooldown.CooldownInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cooldown.CooldownInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cooldown.CooldownInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cooldown.CooldownInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsActive();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getStartTime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getTimeRemaining();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.cooldown.TimeRemaining.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool is_active = 1;
 * @return {boolean}
 */
proto.cooldown.CooldownInfo.prototype.getIsActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cooldown.CooldownInfo} returns this
 */
proto.cooldown.CooldownInfo.prototype.setIsActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int64 start_time = 2;
 * @return {number}
 */
proto.cooldown.CooldownInfo.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cooldown.CooldownInfo} returns this
 */
proto.cooldown.CooldownInfo.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 end_time = 3;
 * @return {number}
 */
proto.cooldown.CooldownInfo.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cooldown.CooldownInfo} returns this
 */
proto.cooldown.CooldownInfo.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional TimeRemaining time_remaining = 4;
 * @return {?proto.cooldown.TimeRemaining}
 */
proto.cooldown.CooldownInfo.prototype.getTimeRemaining = function() {
  return /** @type{?proto.cooldown.TimeRemaining} */ (
    jspb.Message.getWrapperField(this, proto.cooldown.TimeRemaining, 4));
};


/**
 * @param {?proto.cooldown.TimeRemaining|undefined} value
 * @return {!proto.cooldown.CooldownInfo} returns this
*/
proto.cooldown.CooldownInfo.prototype.setTimeRemaining = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cooldown.CooldownInfo} returns this
 */
proto.cooldown.CooldownInfo.prototype.clearTimeRemaining = function() {
  return this.setTimeRemaining(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cooldown.CooldownInfo.prototype.hasTimeRemaining = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cooldown.BlacklistInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.cooldown.BlacklistInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cooldown.BlacklistInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cooldown.BlacklistInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    isActive: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    reason: jspb.Message.getFieldWithDefault(msg, 2, ""),
    startTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    endTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    timeRemaining: (f = msg.getTimeRemaining()) && proto.cooldown.TimeRemaining.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cooldown.BlacklistInfo}
 */
proto.cooldown.BlacklistInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cooldown.BlacklistInfo;
  return proto.cooldown.BlacklistInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cooldown.BlacklistInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cooldown.BlacklistInfo}
 */
proto.cooldown.BlacklistInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsActive(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndTime(value);
      break;
    case 5:
      var value = new proto.cooldown.TimeRemaining;
      reader.readMessage(value,proto.cooldown.TimeRemaining.deserializeBinaryFromReader);
      msg.setTimeRemaining(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cooldown.BlacklistInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cooldown.BlacklistInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cooldown.BlacklistInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cooldown.BlacklistInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsActive();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStartTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getTimeRemaining();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.cooldown.TimeRemaining.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool is_active = 1;
 * @return {boolean}
 */
proto.cooldown.BlacklistInfo.prototype.getIsActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cooldown.BlacklistInfo} returns this
 */
proto.cooldown.BlacklistInfo.prototype.setIsActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string reason = 2;
 * @return {string}
 */
proto.cooldown.BlacklistInfo.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cooldown.BlacklistInfo} returns this
 */
proto.cooldown.BlacklistInfo.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 start_time = 3;
 * @return {number}
 */
proto.cooldown.BlacklistInfo.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cooldown.BlacklistInfo} returns this
 */
proto.cooldown.BlacklistInfo.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 end_time = 4;
 * @return {number}
 */
proto.cooldown.BlacklistInfo.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.cooldown.BlacklistInfo} returns this
 */
proto.cooldown.BlacklistInfo.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional TimeRemaining time_remaining = 5;
 * @return {?proto.cooldown.TimeRemaining}
 */
proto.cooldown.BlacklistInfo.prototype.getTimeRemaining = function() {
  return /** @type{?proto.cooldown.TimeRemaining} */ (
    jspb.Message.getWrapperField(this, proto.cooldown.TimeRemaining, 5));
};


/**
 * @param {?proto.cooldown.TimeRemaining|undefined} value
 * @return {!proto.cooldown.BlacklistInfo} returns this
*/
proto.cooldown.BlacklistInfo.prototype.setTimeRemaining = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cooldown.BlacklistInfo} returns this
 */
proto.cooldown.BlacklistInfo.prototype.clearTimeRemaining = function() {
  return this.setTimeRemaining(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cooldown.BlacklistInfo.prototype.hasTimeRemaining = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * @enum {number}
 */
proto.cooldown.CooldownType = {
  AUTO_APPLY: 0,
  BLACKLIST: 1
};

/**
 * @enum {number}
 */
proto.cooldown.CooldownStatus = {
  ACTIVE: 0,
  EXPIRED: 1,
  NOT_SET: 2
};

goog.object.extend(exports, proto.cooldown);
